/*
 * stm32f4xx_gpio_drivers.c
 *
 *  Created on: Feb 23, 2020
 *      Author: Bibin Eugine
 */

#include "stm32f4xx_gpio_drivers.h"


 /*******************APIS for GPIO driver********************************************************/

 //peripherial clock setup
/*****************************************************************
 * @fn                       - GPIO_PeriClockControl
 *
 * @brief                    - This function enables or disable the corresponding GPIOx clock
 *
 * @param[in]                - Base address of GPIOx
 * @param[in]                - enable or disable macros
 * @param[in]                -
 *
 * @return                   - none
 *
 * @Note                     - none
 */
 void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
	 if(EnorDi == ENABLE){
		 if(pGPIOx == GPIOA)
			 GPIOA_PCLK_EN();
		 else if(pGPIOx == GPIOB)
			 GPIOB_PCLK_EN();
		 else if(pGPIOx == GPIOC)
		 	 GPIOC_PCLK_EN();
		 else if(pGPIOx == GPIOD)
		 	 GPIOD_PCLK_EN();
		 else if(pGPIOx == GPIOE)
		 	 GPIOE_PCLK_EN();
		 else if(pGPIOx == GPIOF)
		 	 GPIOF_PCLK_EN();
		 else if(pGPIOx == GPIOG)
		 	 GPIOG_PCLK_EN();
		 else if(pGPIOx == GPIOH)
		 	 GPIOH_PCLK_EN();
		 else if(pGPIOx == GPIOI)
		 	GPIOI_PCLK_EN();

	 }else{
		         if(pGPIOx == GPIOA)
		 			 GPIOA_PCLK_DI();
		 		 else if(pGPIOx == GPIOB)
		 			 GPIOB_PCLK_DI();
		 		 else if(pGPIOx == GPIOC)
		 		 	 GPIOC_PCLK_DI();
		 		 else if(pGPIOx == GPIOD)
		 		 	 GPIOD_PCLK_DI();
		 		 else if(pGPIOx == GPIOE)
		 		 	 GPIOE_PCLK_DI();
		 		 else if(pGPIOx == GPIOF)
		 		 	 GPIOF_PCLK_DI();
		 		 else if(pGPIOx == GPIOG)
		 		 	 GPIOG_PCLK_DI();
		 		 else if(pGPIOx == GPIOH)
		 		 	 GPIOH_PCLK_DI();
		 		 else if(pGPIOx == GPIOI)
		 		 	GPIOI_PCLK_DI();
	 }

 }

 //Init and Deint
 /*****************************************************************
  * @fn                       - GPIO_Init and GPIO_DeInit
  *
  * @brief                    - This function intialize or deinitialize the GPIO using handle structure or using the ahb bus
  *
  * @param[in]                - Base address of GPIOx and GPIO_Pinconfig
  * @param[in]                -
  * @param[in]                -
  *
  * @return                   - none
  *
  * @Note                     - none
  */
 void GPIO_Init(GPIO_Handle_t *pGPIOHandle){

	 uint32_t temp =0;
	 //enable the peripherial clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
	 //1. configure the mode of gpio poin
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMOde <= GPIO_MODE_ANALOG ){
		 // non interrupt mode
		 temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMOde << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		 pGPIOHandle->pGPIOx->MODER |= temp;
	 }else{
		 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMOde <= GPIO_MODE_IT_FT){
			 //1.configure the FTSR
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			 //CLEAR THE CORRESPING RTSR BIT
			 EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		 }else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMOde <= GPIO_MODE_IT_RT){
			 //1. configure the RTSR
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			 //CLEAR THE CORRESPING FTSR BIT
			 EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		 }else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMOde <= GPIO_MODE_IT_RFT){
			 //1. cinfigure both FTSR and RTSR
			 EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			 EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		 }
		 //2. configure the GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
		 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
		 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
		 SYSCFG_PCLK_EN();
		 SYSCFG->EXTICR[temp1] = portcode<<(temp2 * 4);/////////////////////////////////////
		 //3. enable the exti interrupt delivery using IMR
		 EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	 }

	 temp = 0;

	 //2. configure the speed
	 temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	 pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //setting
	 pGPIOHandle->pGPIOx->OSPEEDR |= temp;//clearing
	 temp = 0;

	 //3. configure the pupd seetings
	 temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPudControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	 pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //setting;
	 pGPIOHandle->pGPIOx->PUPDR |= temp;//clearing
	 temp = 0;

	 //4. Pin output type
	 temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	 pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//setting
	 pGPIOHandle->pGPIOx->OTYPER |= temp;//clearing
	 temp = 0;

	 //5. Configure Alternate function
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMOde == GPIO_MODE_ALTFN){
		 uint32_t temp1, temp2;
		 temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
		 temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
		 pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0f << (4 * temp2));
		 pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<(4 * temp2));
	 }

 }
 void GPIO_DeInit(GPIO_RegDef_t *pGPIOx){
	         if(pGPIOx == GPIOA)
	 			 GPIOA_REG_RESET();
	 		 else if(pGPIOx == GPIOB)
	 			 GPIOB_REG_RESET();
	 		 else if(pGPIOx == GPIOC)
	 		 	 GPIOC_REG_RESET();
	 		 else if(pGPIOx == GPIOD)
	 		 	 GPIOD_REG_RESET();
	 		 else if(pGPIOx == GPIOE)
	 		 	 GPIOE_REG_RESET();
	 		 else if(pGPIOx == GPIOF)
	 		 	 GPIOF_REG_RESET();
	 		 else if(pGPIOx == GPIOG)
	 		 	 GPIOG_REG_RESET();
	 		 else if(pGPIOx == GPIOH)
	 		 	 GPIOH_REG_RESET();
	 		 else if(pGPIOx == GPIOI)
	 		 	 GPIOI_REG_RESET();

 }


 //Data read and write
 /*****************************************************************
   * @fn                       -  GPIO_ReadFromInputPin,GPIO_ReadFromInputPort,GPIO_WriteToOutputPin,GPIO_WriteToOutputPort,GPIO_ToggleOutputPin
   *
   * @brief                    - This function reads or write the data from the input buffer register or to the poutput buffer
   *
   * @param[in]                - Base address of GPIOx and pinmumber
   * @param[in]                - value
   * @param[in]                -
   *
   * @return                   - input value for read data function
   *
   * @Note                     - none
   */
 uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
	 uint8_t value;
	 value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
	 return value;
 }
 uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx){
	 uint16_t value;
	 value = (uint16_t)pGPIOx->IDR;
	 return value;
 }
 void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNUmber, uint8_t Value){
	 if(Value == GPIO_PIN_SET){
		 pGPIOx->ODR |= (1<<PinNUmber);
	 }else{
		 pGPIOx->ODR &= ~(1<<PinNUmber);
	 }
 }
 void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value){
	 pGPIOx->ODR = value;
 }
 void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
      pGPIOx->ODR = pGPIOx->ODR ^ (1<<PinNumber);
 }

 //IRQ configuration and ISR handling
 void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
	 if(EnorDi == ENABLE){
		 if(IRQNumber <= 31){
			 //program ISER0 register
			 *NVIC_ISER0 |= (1<<IRQNumber);

		 }else if(IRQNumber >31 && IRQNumber <64){
			 //program ISER1 register
			 *NVIC_ISER1 |= (1<<IRQNumber%32);

		 }else if(IRQNumber>= 64 && IRQNumber<96){
			 //program ISER2 register
			 *NVIC_ISER2 |= (1<<IRQNumber%64);                     //////////////////////////////////////////////////////////////////////////
		 }
	 }else {
		         if(IRQNumber <= 31){
		        	 //program ICERO register
		        	 *NVIC_ICER0 |= (1<<IRQNumber);

				 }else if(IRQNumber >31 && IRQNumber <64){
					 //program ICERO register
					 *NVIC_ICER1 |= (1<<IRQNumber%32);


				 }else if(IRQNumber>= 64 && IRQNumber<96){
					 //program ICERO register
					 *NVIC_ICER2 |= (1<<IRQNumber%64);              //////////////////////////////////////////////////////////////////////////

				 }
	 }

 }

 void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority){
	 //1.first find out the ipr register
	 uint8_t iprx = IRQNumber/4;
	 uint8_t iprx_section = IRQNumber%4;
	 uint8_t shift_amount = (8*iprx_section)+(8-NO_PR_BITS_IMPLEMENTED);//check the lecture 114
	 *(NVIC_PR_BASE_ADDR+(iprx)) |= (IRQPriority << shift_amount);

 }
 void GPIO_IRQHandling(uint8_t PinNumber){
	 //clear the exti pr register corresponding to the pin number
	 if(EXTI->PR & (1<<PinNumber)){
		 //clear
		 EXTI->PR |= (1<<PinNumber); // writing one to the register the clear, check the register
	 }

 }
