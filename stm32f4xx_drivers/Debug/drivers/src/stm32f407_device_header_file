/*
 * stm32f4xx.h
 *
 *  Created on: Feb 23, 2020
 *      Author: Bibin Eugine
 */

#ifndef INC_STM32F4XX_H_
#define INC_STM32F4XX_H_

#include<stdint.h>
#include<stddef.h>

/********ARM Cortex Mx Processor NVIC ISERX register Addresses*******/
#define NVIC_ISER0              ((volatile uint32_t*)0xE000E100)
#define NVIC_ISER1              ((volatile uint32_t*)0xE000E104)
#define NVIC_ISER2              ((volatile uint32_t*)0xE000E108)
#define NVIC_ISER3              ((volatile uint32_t*)0xE000E10C)

//ARM Cortex Mx Processor NVIC ICERx register Addresses
#define NVIC_ICER0              ((volatile uint32_t*)0xE000E180)
#define NVIC_ICER1              ((volatile uint32_t*)0xE000E184)
#define NVIC_ICER2              ((volatile uint32_t*)0xE000E184)
#define NVIC_ICER3              ((volatile uint32_t*)0xE000E18C)

//ARM Cortex Mx Processor Priority register Addresses
#define NVIC_PR_BASE_ADDR       ((volatile uint32_t*)0xE000E400)

#define NO_PR_BITS_IMPLEMENTED               4

// base addresses of flash and sram memories

#define FLASH_BASE_ADDR                           0x08000000U // Main memory
#define SRAM1_BASE_ADDR                           0x20000000U //112kb
#define SRAM2_BASE_ADDR                           0x20001C00U //16kb
#define ROM                                       0x1FFF0000U //system memory
#define SRAM                                      SRAM1_BASE_ADDR



//AHB and APB bus peripherial base addresses
#define PERIPH_BASE                                0x40000000U
#define APB1PERIPH_BASE                            PERIPH_BASE
#define APB2PERIPH_BASE                            0x40010000U
#define AHB1PERIPH_BASE                            0x40020000U
#define AHB2PERIPH_BASE                            0x50000000U

//All peripherial base addresses HANGING ON AHB1
#define GPIOA_BASE_ADDR                             (AHB1PERIPH_BASE + 0x0000)
#define GPIOB_BASE_ADDR                             (AHB1PERIPH_BASE + 0x0400)
#define GPIOC_BASE_ADDR                             (AHB1PERIPH_BASE + 0x0800)
#define GPIOD_BASE_ADDR                             (AHB1PERIPH_BASE + 0x0C00)
#define GPIOE_BASE_ADDR                             (AHB1PERIPH_BASE + 0x1000)
#define GPIOF_BASE_ADDR                             (AHB1PERIPH_BASE + 0x1400)
#define GPIOG_BASE_ADDR                             (AHB1PERIPH_BASE + 0x1800)
#define GPIOH_BASE_ADDR                             (AHB1PERIPH_BASE + 0x1C00)
#define GPIOI_BASE_ADDR                             (AHB1PERIPH_BASE + 0x2000)
#define GPIOJ_BASE_ADDR                             (AHB1PERIPH_BASE + 0x2400)
#define GPIOK_BASE_ADDR                             (AHB1PERIPH_BASE + 0x2800)
#define RCC_BASE_ADDR                               (AHB1PERIPH_BASE + 0x3800)

//Base addresses of all peripherials hanging on APB1 bus
#define I2C1_BASE_ADDR                              (APB1PERIPH_BASE + 0x5400)
#define I2C2_BASE_ADDR                              (APB1PERIPH_BASE + 0x5800)
#define I2C3_BASE_ADDR                              (APB1PERIPH_BASE + 0x5C00)
#define SPI2_BASE_ADDR                              (APB1PERIPH_BASE + 0x3800)
#define SPI3_BASE_ADDR                              (APB1PERIPH_BASE + 0x3C00)
#define USART2_BASE_ADDR                            (APB1PERIPH_BASE + 0x4400)
#define USART3_BASE_ADDR                            (APB1PERIPH_BASE + 0x4800)
#define UART4_BASE_ADDR                             (APB1PERIPH_BASE + 0x4C00)
#define UART5_BASE_ADDR                             (APB1PERIPH_BASE + 0x5000)

//Base addresses of all peripherials hanging on APB2 bus
#define SPI1_BASE_ADDR                              (APB2PERIPH_BASE + 0x3000)
#define USART1_BASE_ADDR                            (APB2PERIPH_BASE + 0x1000)
#define USART6_BASE_ADDR                            (APB2PERIPH_BASE + 0x1400)
#define EXTI_BASE_ADDR                              (APB2PERIPH_BASE + 0x3C00)
#define SYSCFG_BASE_ADDR                            (APB2PERIPH_BASE + 0x3800)

/************************Peripherial register definition*********************/

//peripherial register definition structure for GPIOx
typedef struct{
	volatile uint32_t MODER;                                 //offset: 0x00
	volatile uint32_t OTYPER;                                //offset: 0x04
	volatile uint32_t OSPEEDR;                               //offset: 0x08
	volatile uint32_t PUPDR;                                 //offset: 0x0C
	volatile uint32_t IDR;                                   //offset: 0x10
	volatile uint32_t ODR;                                   //offset: 0x14
	volatile uint32_t BSRR;                                  //offset: 0x18
	volatile uint32_t LCKR;                                  //offset: 0x1C
	volatile uint32_t AFR[2];                                //offset: 0x20 - 0x24
}GPIO_RegDef_t;

//peripherial register definition structure for RCC
typedef struct{
	volatile uint32_t CR;                                    //offset: 0x00
	volatile uint32_t PLLCFGR;                               //offset: 0x04
	volatile uint32_t CFGR;                                  //offset: 0x08
	volatile uint32_t CIR;                                   //offset: 0x0c
	volatile uint32_t AHB1RSTR;                              //offset: 0x10
	volatile uint32_t AHB2RSTR;                              //offset: 0x14
	volatile uint32_t AHB3RSTR;                              //offset: 0x18
	         uint32_t RESERVED0;
	volatile uint32_t APB1RSTR;                              //offset: 0x20
	volatile uint32_t APB2RSTR;                              //offset: 0x24
	         uint32_t RESERVED1[2];
	volatile uint32_t AHB1ENR;                               //offset: 0x30
	volatile uint32_t AHB2ENR;                               //offset: 0x34
	volatile uint32_t AHB3ENR;                               //offset: 0x38
	         uint32_t RESERVED2;
	volatile uint32_t APB1ENR;                               //offset: 0x40
	volatile uint32_t APB2ENR;                               //offset: 0x44
	         uint32_t RESERVED3[2];
	volatile uint32_t AHB1LPENR;                             //offset: 0x50
	volatile uint32_t AHB2LPENR;                             //offset: 0x54
	volatile uint32_t AHB3LPENR;                             //offset: 0x58
	         uint32_t RESERVED4;
	volatile uint32_t APB1LPENR;                             //offset: 0x60
	volatile uint32_t APB2LPENR;                             //offset: 0x64
	         uint32_t RESERVED5[2];
	volatile uint32_t BDCR;                                  //offset: 0x70
	volatile uint32_t CSR;                                   //offset: 0x74
	         uint32_t RESERVED6[2];
	volatile uint32_t SSCGR;                                 //offset: 0x80
	volatile uint32_t PLLI2SCFGR;                            //offset: 0x84
	volatile uint32_t PLLSAICFGR;                            //offset: 0x88
	volatile uint32_t DCKCFGR;                               //offset: 0x8c
	volatile uint32_t CKGATENR;                              //offset: 0x90
	volatile uint32_t DCKCFGR2;                              //offset: 0x94

}RCC_RegDef_t;

//peripherial register definition structure for EXTI

typedef struct{
	volatile uint32_t IMR;                                 //offset: 0x00
	volatile uint32_t EMR;                                //offset: 0x04
	volatile uint32_t RTSR;                               //offset: 0x08
	volatile uint32_t FTSR;                                 //offset: 0x0C
	volatile uint32_t SWIER;                                   //offset: 0x10
	volatile uint32_t PR;                                   //offset: 0x14
}EXTI_RegDef_t;

//peripherial register definition structure for SYSCFG
typedef struct{
	volatile uint32_t MEMRMP;                                 //offset: 0x00
	volatile uint32_t PMC;                                    //offset: 0x04
	volatile uint32_t EXTICR[4];                              //offset: 0x08-Ox14
             uint32_t RESERVED[2];
	volatile uint32_t CMPCR;                                  //offset: 0x20
	         uint32_t RESERVED2[2];
	volatile uint32_t CFGR;                                   //offset: 0x2C
}SYSCFG_RegDef_t;

//peripherial register definition structure for SPI
typedef struct{
	volatile uint32_t CR1;                                   //offset: 0x00
	volatile uint32_t CR2;                                   //offset: 0x04
	volatile uint32_t SR;                                    //offset: 0x08
	volatile uint32_t DR;                                    //offset: Ox0C
	volatile uint32_t CRCPR;                                 //offset: 0x10
	volatile uint32_t RXCRCR;                                //offset: 0x14
	volatile uint32_t TXCRCR;                                //offset: 0x18
	volatile uint32_t I2SCFGR;                               //offset: 0x1C
	volatile uint32_t I2SPR;                                 //offset: 0x20
}SPI_RegDef_t;

//peripherial register definition structure for i2c
typedef struct{
	volatile uint32_t CR1;                                   //offse:0x00
	volatile uint32_t CR2;                                   //offset: 0x04
	volatile uint32_t OAR1;                                  //offset: 0x08
	volatile uint32_t OAR2;                                  //offset: Ox0C
	volatile uint32_t DR;                                    //offset: 0x10
	volatile uint32_t SR1;                                   //offset: 0x14
	volatile uint32_t SR2;                                   //offset: 0x18
	volatile uint32_t CCR;                                   //offset: 0x1C
	volatile uint32_t TRISE;                                 //offset: 0x20
	volatile uint32_t FLTR;                                  //offset: 0x20
}I2C_RegDef_t;


//macros for various peripherial registers

#define GPIOA                                        ((GPIO_RegDef_t *)GPIOA_BASE_ADDR)
#define GPIOB                                        ((GPIO_RegDef_t *)GPIOB_BASE_ADDR)
#define GPIOC                                        ((GPIO_RegDef_t *)GPIOC_BASE_ADDR)
#define GPIOD                                        ((GPIO_RegDef_t *)GPIOD_BASE_ADDR)
#define GPIOE                                        ((GPIO_RegDef_t *)GPIOE_BASE_ADDR)
#define GPIOF                                        ((GPIO_RegDef_t *)GPIOF_BASE_ADDR)
#define GPIOG                                        ((GPIO_RegDef_t *)GPIOG_BASE_ADDR)
#define GPIOH                                        ((GPIO_RegDef_t *)GPIOH_BASE_ADDR)
#define GPIOI                                        ((GPIO_RegDef_t *)GPIOI_BASE_ADDR)

#define RCC                                          ((RCC_RegDef_t *)RCC_BASE_ADDR)
#define EXTI                                         ((EXTI_RegDef_t *)EXTI_BASE_ADDR)
#define SYSCFG                                       ((SYSCFG_RegDef_t *)SYSCFG_BASE_ADDR)

#define SPI1                                         ((SPI_RegDef_t*)SPI1_BASE_ADDR)
#define SPI2                                         ((SPI_RegDef_t*)SPI2_BASE_ADDR)
#define SPI3                                         ((SPI_RegDef_t*)SPI3_BASE_ADDR)

#define I2C1                                         ((I2C_RegDef_t*)I2C1_BASE_ADDR)
#define I2C2                                         ((I2C_RegDef_t*)I2C2_BASE_ADDR)
#define I2C3                                         ((I2C_RegDef_t*)I2C3_BASE_ADDR)


//clock enable macros for GPIOx peripherials

#define GPIOA_PCLK_EN()                              (RCC->AHB1ENR |= (1<<0))
#define GPIOB_PCLK_EN()                              (RCC->AHB1ENR |= (1<<1))
#define GPIOC_PCLK_EN()                              (RCC->AHB1ENR |= (1<<2))
#define GPIOD_PCLK_EN()                              (RCC->AHB1ENR |= (1<<3))
#define GPIOE_PCLK_EN()                              (RCC->AHB1ENR |= (1<<4))
#define GPIOF_PCLK_EN()                              (RCC->AHB1ENR |= (1<<5))
#define GPIOG_PCLK_EN()                              (RCC->AHB1ENR |= (1<<6))
#define GPIOH_PCLK_EN()                              (RCC->AHB1ENR |= (1<<7))
#define GPIOI_PCLK_EN()                              (RCC->AHB1ENR |= (1<<8))

//clock enable macros for I2Cx peripherials
#define I2C1_PCLK_EN()                               (RCC->APB1ENR |= (1<<21))
#define I2C2_PCLK_EN()                               (RCC->APB1ENR |= (1<<22))
#define I2C3_PCLK_EN()                               (RCC->APB1ENR |= (1<<23))

//clock enable macros for SPIx peripherials
#define SPI1_PCLK_EN()                               (RCC->APB2ENR |= (1<<12))
#define SPI2_PCLK_EN()                               (RCC->APB1ENR |= (1<<14))
#define SPI3_PCLK_EN()                               (RCC->APB1ENR |= (1<<15))

//clock enable macros for USARTx peripherials
#define USART1_PCLK_EN()                             (RCC->APB2ENR |= (1<<4))
#define USART2_PCLK_EN()                             (RCC->APB1ENR |= (1<<17))
#define USART3_PCLK_EN()                             (RCC->APB1ENR |= (1<<18))
#define UART4_PCLK_EN()                              (RCC->APB1ENR |= (1<<19))
#define UART5_PCLK_EN()                              (RCC->APB1ENR |= (1<<20))
#define USART6_PCLK_EN()                             (RCC->APB2ENR |= (1<<5))

//clock enable macros for SYSCFG peripherials
#define SYSCFG_PCLK_EN()                             (RCC->APB2ENR |= (1<<14))

//clock disable macros for GPIOx peripherials

#define GPIOA_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<0))
#define GPIOB_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<1))
#define GPIOC_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<2))
#define GPIOD_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<3))
#define GPIOE_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<4))
#define GPIOF_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<5))
#define GPIOG_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<6))
#define GPIOH_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<7))
#define GPIOI_PCLK_DI()                              (RCC->AHB1ENR &= ~(1<<8))

//clock disable macros for I2Cx peripherials
#define I2C1_PCLK_DI()                               (RCC->APB1ENR &= ~(1<<21))
#define I2C2_PCLK_DI()                               (RCC->APB1ENR &= ~(1<<22))
#define I2C3_PCLK_DI()                               (RCC->APB1ENR &= ~(1<<23))

//clock disable macros for SPIx peripherials
#define SPI1_PCLK_DI()                               (RCC->APB2ENR &= ~(1<<12))
#define SPI2_PCLK_DI()                               (RCC->APB1ENR &= ~(1<<14))
#define SPI3_PCLK_DI()                               (RCC->APB1ENR &= ~(1<<15))

//clock disable macros for USARTx peripherials
#define USART1_PCLK_DI()                             (RCC->APB2ENR &= ~(1<<4))
#define USART2_PCLK_DI()                             (RCC->APB1ENR &= ~(1<<17))
#define USART3_PCLK_DI()                             (RCC->APB1ENR &= ~(1<<18))
#define UART4_PCLK_DI()                              (RCC->APB1ENR &= ~(1<<19))
#define UART5_PCLK_DI()                              (RCC->APB1ENR &= ~(1<<20))
#define USART6_PCLK_DI()                             (RCC->APB2ENR &= ~(1<<5))

//clock disable macros for SYSCFG peripherials
#define SYSCFG_PCLK_DI()                             (RCC->APB2ENR |= ~(1<<14))

// macros to rest GPIOx peripherals
#define GPIOA_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<0)); (RCC->AHB1RSTR &= ~(1<<0));}while(0)
#define GPIOB_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<1)); (RCC->AHB1RSTR &= ~(1<<1));}while(0)
#define GPIOC_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<2)); (RCC->AHB1RSTR &= ~(1<<2));}while(0)
#define GPIOD_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<3)); (RCC->AHB1RSTR &= ~(1<<3));}while(0)
#define GPIOE_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<4)); (RCC->AHB1RSTR &= ~(1<<4));}while(0)
#define GPIOF_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<5)); (RCC->AHB1RSTR &= ~(1<<5));}while(0)
#define GPIOG_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<6)); (RCC->AHB1RSTR &= ~(1<<6));}while(0)
#define GPIOH_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<7)); (RCC->AHB1RSTR &= ~(1<<7));}while(0)
#define GPIOI_REG_RESET()                            do{(RCC->AHB1RSTR |= (1<<7)); (RCC->AHB1RSTR &= ~(1<<8));}while(0)

//macros to rest I2Cx peripherials
#define I2C1_REG_RESET()                              do{(RCC->APB1RSTR |= (1<<21)); (RCC->APB1RSTR &= ~(1<<21));}while(0)
#define I2C2_REG_RESET()                              do{(RCC->APB1RSTR |= (1<<22)); (RCC->APB1RSTR &= ~(1<<22));}while(0)
#define I2C3_REG_RESET()                              do{(RCC->APB1RSTR |= (1<<23)); (RCC->APB1RSTR &= ~(1<<23));}while(0)

// macro return portcode
#define GPIO_BASEADDR_TO_CODE(x)                     ((x==GPIOA)?0:\
		                                             (x==GPIOB)?1:\
		                                             (x==GPIOC)?2:\
		                                             (x==GPIOD)?3:\
		                                             (x==GPIOE)?4:\
		                                             (x==GPIOF)?5:\
		                                             (x==GPIOG)?6:\
		                                             (x==GPIOH)?7:8) //////////////////////////////////////////////////////////////////

//IRQ NUMBERS OF MCU
#define IRQ_NO_EXTI0            6
#define IRQ_NO_EXTI1            7
#define IRQ_NO_EXTI2            8
#define IRQ_NO_EXTI3            9
#define IRQ_NO_EXTI4            10
#define IRQ_NO_EXTI9_5          23
#define IRQ_NO_EXTI15_10        40


#define IRQ_NO_SPI1            35
#define IRQ_NO_SPI2            36
#define IRQ_NO_SPI3            51

//IRQ Priority of MCU
#define NVIC_IRQ_PRI0          0
#define NVIC_IRQ_PRI1          1
#define NVIC_IRQ_PRI2          2
#define NVIC_IRQ_PRI3          3
#define NVIC_IRQ_PRI4          4
#define NVIC_IRQ_PRI5          5
#define NVIC_IRQ_PRI6          6
#define NVIC_IRQ_PRI7          7
#define NVIC_IRQ_PRI8          8
#define NVIC_IRQ_PRI9          9
#define NVIC_IRQ_PRI10         10
#define NVIC_IRQ_PRI11         11
#define NVIC_IRQ_PRI12         12
#define NVIC_IRQ_PRI13         13
#define NVIC_IRQ_PRI14         14
#define NVIC_IRQ_PRI15         15

//generic marcos
#define ENABLE                                        1
#define DISABLE                                       0
#define SET                                           ENABLE
#define RESET                                         DISABLE
#define GPIO_PIN_SET                                  SET
#define GPIO_PIN_RESET                                RESET
#define FLAG_RESET                                    RESET
#define FLAG_SET                                      SET

//bit specific macros of SPI_CR1
#define SPI_CR1_CPHA        0
#define SPI_CR1_CPOL        1
#define SPI_CR_MSTR         2
#define SPI_CR1_BR          3
#define SPI_CR1_SPE         6
#define SPI_CR1_LSB_FIRST   7
#define SPI_CR1_SSI         8
#define SPI_CR1_SSM         9
#define SPI_CR1_RX_ONLY     10
#define SPI_CR1_DFF         11
#define SPI_CR1_CRC_NXT     12
#define SPI_CR1_CRC_EN      13
#define SPI_CR1_BIBI_OE     14
#define SPI_CR1_BIDI_MODE   15

//bit specific macros of SPI_CR2
#define SPI_CR2_RXDMAEN       0
#define SPI_CR2_TXDMAEN       1
#define SPI_CR2_SSOE          2
#define SPI_CR2_RESERVED      3
#define SPI_CR2_FRF           4
#define SPI_CR2_ERRIE         5
#define SPI_CR2_RXNEIE        6
#define SPI_CR2_TXEIE         7
#define SPI_CR2_RESERVED1     8

//bit specific macros of SPI_SR
#define SPI_SR_RXNE          0
#define SPI_SR_TXE           1
#define SPI_SR_CHSIDE        2
#define SPI_SR_UDR           3
#define SPI_SR_CRCERR        4
#define SPI_SR_MODF          5
#define SPI_SR_OVR           6
#define SPI_SR_BSY           7
#define SPI_SR_FRE           8

//bit specific macros of i2c_cr1
#define I2C_CR1_PE                  0
#define I2C_CR1_NOSTRETCH           7
#define I2C_CR1_START               8
#define I2C_CR1_STOP                9
#define I2C_CR1_ACK                 10
#define I2C_CR1_SWRST               15

//bit specific marcos of i2c_cr2
#define I2C_CR2_FREQ              0
#define I2C_CR2_ITERREN           8
#define I2C_CR2_ITEVTEN           9
#define I2C_CR2_ITBUFFEN          10

//bit specific macros of i2c_oar1

#define I2C_OAR1_ADD0               0
#define I2C_OAR1_ADD71              1
#define I2C_OAR1_ADD98              8
#define I2C_OAR1_ADDMORE           15

//bit position definitions i2c_sr1
#define I2C_SR1_SB                       0
#define I2C_SR1_ADDR                     1
#define I2C_SR1_BTF                      2
#define I2C_SR1_ADD10                    3
#define I2C_SR1_STOPF                    4
#define I2C_SR1_RXNE                     6
#define I2C_SR1_TXE                      7
#define I2C_SR1_BERR                     8
#define I2C_SR1_ARLO                     9
#define I2C_SR1_AF                      10
#define I2C_SR1_OVR                     11
#define I2C_SR1_TIMEOUT                 14

//bit position definitions i2c_sr2
#define I2C_SR2_MSL                    0
#define I2C_SR2_BUSY                   1
#define I2C_SR2_TRA                    2
#define I2C_SR2_GENCALL                4
#define I2C_SR2_DUALF                  7

//bit position definitions i2c_CCR
#define I2C_CCR_CCR           0
#define I2C_CCR_DUTY         14
#define I2C_CCR_FS           15

#include "stm32f4xx_gpio_drivers.h"
#include "stm32f4xx_i2c_drivers.h"
//#include "stm32f4xx_spi_drivers.h"


#endif /* INC_STM32F4XX_H_ */

