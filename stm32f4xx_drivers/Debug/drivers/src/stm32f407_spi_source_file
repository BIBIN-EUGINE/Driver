/*
 * stm32f4xx_spi_drivers.c
 *
 *  Created on: Feb. 24, 2020
 *      Author: Admin
 */

///////continue from section 167: time:9:49


#include "stm32f4xx_spi_drivers.h"



static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

/*******************APIS for GPIO driver function definition********************************************************/

  //peripherial clock setup
  void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
	  if(EnorDi == ENABLE){
	  		 if(pSPIx == SPI1)
	  			 SPI1_PCLK_EN();
	  		 else if(pSPIx == SPI2)
	  			 SPI2_PCLK_EN();
	  		 else if(pSPIx == SPI3)
	  		 	 SPI3_PCLK_EN();

	  	 }else{
	  		             if(pSPIx == SPI1)
	  			  			 SPI1_PCLK_DI();
	  			  		 else if(pSPIx == SPI2)
	  			  			 SPI2_PCLK_DI();
	  			  		 else if(pSPIx == SPI3)
	  			  		 	 SPI3_PCLK_DI();

	  	 }

  }

  //Init and Deint
  void SPI_Init(SPI_Handle_t *pSPIHandle){
	  //configure the SPI_CR1 register
	  uint32_t tempreg =0;
	  // peripherial clock
	  SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

	  //1. configure the device mode
	  tempreg |= (pSPIHandle->SPI_PinConfig.SPI_DeviceMode <<SPI_CR_MSTR);
      //2. configure the bus config
     if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
    	 //bidi mode should be cleared
    	 tempreg &= ~(1<<15);
     }else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
    	 //bidi mode should be set
    	 tempreg |= ~(1<<15);
     }else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
    	 //bidi must should be cleared
    	 //RXONLY bit must be set
    	 tempreg &= ~(1<<15);
    	 tempreg |= (1<<10);
     }
     //3. configure the spi serial clock speed(baud rate)
     tempreg |= pSPIHandle->SPI_PinConfig.SPI_SclkSpeed <<SPI_CR1_BR;
     //4. configure the DFF
     tempreg |= pSPIHandle->SPI_PinConfig.SPI_DFF <<SPI_CR1_DFF;
     //5. configure the CPOL
     tempreg |= pSPIHandle->SPI_PinConfig.SPI_CPOL <<SPI_CR1_CPOL;
     //6. configure the CPHA
     tempreg |= pSPIHandle->SPI_PinConfig.SPI_CPHA << SPI_CR1_CPHA;

     pSPIHandle->pSPIx->CR1 = tempreg;

  }
  void SPI_DeInit(SPI_RegDef_t *pSPIx){

  }

  uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint8_t FlagName){
	  if(pSPIx->SR & FlagName){
		  return FLAG_SET;
	  }
	  return FLAG_RESET;
  }

  //Data send and recieve, this is a blocking call
  void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
        while(Len>0){

        	//1. wait until TXE is set
        	while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)== FLAG_RESET);

        	//2. check the DFF bit in CR1
        	if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
        		//16bit DFF
        		//1. load the data into the DR
        		pSPIx->DR = *((uint16_t*)pTxBuffer);
        		Len--;
        		Len--;
        		(uint16_t*)pTxBuffer++;
        	}else{
        		//8 bit DFF
        		pSPIx->DR = *((uint8_t*)pTxBuffer);
        		Len--;
        		(uint8_t*)pTxBuffer++;
        	}
        }
  }
  void SPI_ReceiveData(SPI_RegDef_t *pSPIx,uint8_t *pRxBuffer, uint32_t Len){
	  while(Len>0){

	          	//1. wait until RXE is set
	          	while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)== FLAG_RESET);

	          	//2. check the DFF bit in CR1
	          	if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
	          		//16bit DFF
	          		//1. load the data from the DR
	          	    *((uint16_t*)pRxBuffer) = pSPIx->DR ;
	          		Len--;
	          		Len--;
	          		(uint16_t*)pRxBuffer++;
	          	}else{
	          		//8 bit DFF
	          		*((uint8_t*)pRxBuffer) = pSPIx->DR;
	          		Len--;
	          		(uint8_t*)pRxBuffer++;
	          	}
	          }

  }

 // SPI enable
  void SPI_PeripherialControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
	  if(EnorDi == ENABLE){
		  pSPIx->CR1 |= (1<< SPI_CR1_SPE);
	  }else{
		  pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	  }
  }

  void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
	      if(EnorDi == ENABLE){
	  		  pSPIx->CR1 |= (1<< SPI_CR1_SSI);
	  	  }else{
	  		  pSPIx->CR1 &= ~(1<< SPI_CR1_SSI);
	  	  }
  }

  void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
	          if(EnorDi == ENABLE){
	  	  		  pSPIx->CR2 |= (1<< SPI_CR2_SSOE);
	  	  	  }else{
	  	  		  pSPIx->CR2 &= ~(1<< SPI_CR2_SSOE);
	  	  	  }
  }
  //IRQ configuration and ISR handling
  void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
	    if(EnorDi == ENABLE){
	  		 if(IRQNumber <= 31){
	  			 //program ISER0 register
	  			 *NVIC_ISER0 |= (1<<IRQNumber);

	  		 }else if(IRQNumber >31 && IRQNumber <64){
	  			 //program ISER1 register
	  			 *NVIC_ISER1 |= (1<<IRQNumber%32);

	  		 }else if(IRQNumber>= 64 && IRQNumber<96){
	  			 //program ISER2 register
	  			 *NVIC_ISER2 |= (1<<IRQNumber%64);                     //////////////////////////////////////////////////////////////////////////
	  		 }
	  	 }else {
	  		         if(IRQNumber <= 31){
	  		        	 //program ICERO register
	  		        	 *NVIC_ICER0 |= (1<<IRQNumber);

	  				 }else if(IRQNumber >31 && IRQNumber <64){
	  					 //program ICERO register
	  					 *NVIC_ICER1 |= (1<<IRQNumber%32);


	  				 }else if(IRQNumber>= 64 && IRQNumber<96){
	  					 //program ICERO register
	  					 *NVIC_ICER2 |= (1<<IRQNumber%64);              //////////////////////////////////////////////////////////////////////////

	  				 }

  }
  void SPI_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority){
	  //1.first find out the ipr register
	  	 uint8_t iprx = IRQNumber/4;
	  	 uint8_t iprx_section = IRQNumber%4;
	  	 uint8_t shift_amount = (8*iprx_section)+(8-NO_PR_BITS_IMPLEMENTED);//check the lecture 114
	  	 *(NVIC_PR_BASE_ADDR+(iprx)) |= (IRQPriority << shift_amount);
  }


  void SPI_IRQHandling(SPI_Handle_t *pHandle){
	  uint8_t temp1, temp2;
	  //first lets check for TXE
	  temp1 = pHandle->pSPIx->SR & (1<<SPI_SR_TXE);
	  temp2=   pHandle->pSPIx->CR2 & (1<<SPI_CR2_TXEIE);
	  if(temp1&&temp2){
		  //handle TXE
		  spi_txe_interrupt_handle(pHandle);
	  }

	  //lets check for RXNE
	  temp1 = pHandle->pSPIx->SR & (1<<SPI_SR_RXNE);
	  temp2 =  pHandle->pSPIx->CR2 & (1<<SPI_CR2_RXNEIE);

	  if(temp1&&temp2){
	  		  //handle RXNE
	  		  spi_rxne_interrupt_handle(pHandle);
	  }
	  //check for overrun flag
	  temp1 = pHandle->pSPIx->SR & (1<<SPI_SR_OVR);
	  temp2 =  pHandle->pSPIx->CR2 & (1<<SPI_CR2_ERRIE);
	  if(temp1&&temp2){
	  	   //handle RXNE
	  	   spi_err_interrupt_handle(pHandle);
	  }

  }

  uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len){

	  uint8_t state = pSPIHandle->TxState;
	  if(state != SPI_BUSY_IN_TX){

	  //1. save the Tx buffer address and Len info in some global variables
	  pSPIHandle->pTxBuffer = pTxBuffer;
	  pSPIHandle->TxLen = Len;
	  //2. Mark the Spi state as busyin transmission so that
	  //no other code can take over SPI peripherial until transmission is over
	  pSPIHandle->TxState = SPI_BUSY_IN_TX;
	  //3. ENable TXIE flag in CR2 register to get interrupt whenever TXE flag is set in SR
	  pSPIHandle->pSPIx->CR2 |= (1<<SPI_CR2_TXEIE);
	  }
      return state;
  }
  uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pRxBuffer, uint32_t Len){
	  int8_t state = pSPIHandle->RxState;
	  	  if(state != SPI_BUSY_IN_RX){

	  	  //1. save the Tx buffer address and Len info in some global variables
	  	  pSPIHandle->pRxBuffer = pRxBuffer;
	  	  pSPIHandle->RxLen = Len;
	  	  //2. Mark the Spi state as busyin transmission so that
	  	  //no other code can take over SPI peripherial until transmission is over
	  	  pSPIHandle->RxState = SPI_BUSY_IN_RX;
	  	  //3. ENable TXIE flag in CR2 register to get interrupt whenever TXE flag is set in SR
	  	  pSPIHandle->pSPIx->CR2 |= (1<<SPI_CR2_RXNEIE);
	  	  }
	        return state;

  }

  //some helper function
    static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
  	  //2. check the DFF bit in CR1
  	  	          	if(pSPIHandle->pSPIx->CR1 & (1<<SPI_CR1_DFF)){
  	  	          		//16bit DFF
  	  	          		//1. load the data from the DR
  	  	          	pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer) ;
  	  	            pSPIHandle->TxLen--;
  	  	            pSPIHandle->TxLen--;
  	  	          	(uint16_t*)pSPIHandle->pTxBuffer++;
  	  	          	}else{
  	  	          		//8 bit DFF
  	  	          	pSPIHandle->pSPIx->DR	= *((uint8_t*)pSPIHandle->pTxBuffer);
  	  	            pSPIHandle->TxLen--;
  	  	          	(uint8_t*)pSPIHandle->pTxBuffer++;
  	  	          	}

  	  	          	if(!pSPIHandle->TxLen){
  	  	          		//TxLen is zero, so close the spi transmission and inform the application that
  	  	          		//Tx is over
  	  	          		pSPIHandle->pSPIx->CR2 &= ~(1<<SPI_CR2_TXEIE);
  	  	          		pSPIHandle->pTxBuffer = NULL;
  	  	          		pSPIHandle->TxLen = 0;
  	  	          		pSPIHandle->TxState = SPI_READY;
  	  	          		SPI_ApplicationEventCallBack(pSPIHandle, SPI_EVENT_TX_CMPLT);

  	  	          	}
    }

    static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle){
  	                   if(pSPIHandle->pSPIx->CR1 & (1<<SPI_CR1_DFF)){
  	  	  	          		//16bit DFF
  	  	  	          		//1. load the data from the DR
  	  	  	          	*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t)pSPIHandle->pSPIx->DR ;
  	  	  	            pSPIHandle->RxLen--;
  	  	  	            pSPIHandle->RxLen--;
  	  	  	          	(uint16_t*)pSPIHandle->pRxBuffer--;
  	  	  	          	}else{
  	  	  	          		//8 bit DFF
  	  	  	          	*((uint16_t*)pSPIHandle->pRxBuffer) = (uint8_t)pSPIHandle->pSPIx->DR ;
  	  	  	          	pSPIHandle->RxLen--;
  	  	  	            (uint8_t*)pSPIHandle->pRxBuffer--;
  	  	  	          	}

  	  	  	          	if(!pSPIHandle->TxLen){
  	  	  	          		//TxLen is zero, so close the spi transmission and inform the application that
  	  	  	          		//Tx is over
  	  	  	          		pSPIHandle->pSPIx->CR2 &= ~(1<<SPI_CR2_RXNEIE);
  	  	  	          		pSPIHandle->pRxBuffer = NULL;
  	  	  	          		pSPIHandle->RxLen = 0;
  	  	  	          		pSPIHandle->RxState = SPI_READY;
  	  	  	          		SPI_ApplicationEventCallBack(pSPIHandle, SPI_EVENT_RX_CMPLT);

  	  	  	          	}

    }
    static void spi_err_interrupt_handle(SPI_Handle_t *pSPIHandle){

       uint8_t temp;
       //1.clear the ovr flag
       if(pSPIHandle->TxState != SPI_BUSY_IN_TX){
    	   temp = pSPIHandle->pSPIx->DR;
    	   temp = pSPIHandle->pSPIx->SR;
       }
       //2. inform the application
       SPI_ApplicationEventCallBack(pSPIHandle, SPI_EVENT_OVR_ERR);
    }

    void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){

    	                        pSPIHandle->pSPIx->CR2 &= ~(1<<SPI_CR2_TXEIE);
    	  	  	          		pSPIHandle->pTxBuffer = NULL;
    	  	  	          		pSPIHandle->TxLen = 0;
    	  	  	          		pSPIHandle->TxState = SPI_READY;

    }
    void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
    	                            pSPIHandle->pSPIx->CR2 &= ~(1<<SPI_CR2_RXNEIE);
    	  	  	  	          		pSPIHandle->pRxBuffer = NULL;
    	  	  	  	          		pSPIHandle->RxLen = 0;
    	  	  	  	          		pSPIHandle->RxState = SPI_READY;
    }





