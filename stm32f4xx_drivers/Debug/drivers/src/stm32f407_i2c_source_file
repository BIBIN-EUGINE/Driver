/*
 * stm32f4xx_i2c_drivers.c
 *
 *  Created on: Feb. 25, 2020
 *      Author: Bibin Eugine
 */

#include "stm32f4xx_i2c_drivers.h"
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};

static void  I2C_GenerateStartCondition(I2C_RegDef_t *pI2cx);

static void  I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
		  pI2Cx->CR1 |= (1 << I2C_CR1_START);
	  }
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
	SlaveAddr = SlaveAddr <<1;
	SlaveAddr &= ~(1);// SlaveAddr is slave address + r/nw bit =0
	pI2Cx->DR = SlaveAddr;
}

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
	uint32_t dummyRead = pI2Cx->SR1;
	dummyRead = pI2Cx->SR2;
	(void)dummyRead;
}

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
	  	  if(pI2Cx->SR1 & FlagName){
	  		  return FLAG_SET;
	  	  }
	  	  return FLAG_RESET;
}




	//*******************API********************************//

	//peripherial clock setup
	  void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
		      if(EnorDi == ENABLE){
		  	  		 if(pI2Cx == I2C1)
		  	  			 I2C1_PCLK_EN();
		  	  		 else if(pI2Cx == I2C2)
		  	  			 I2C2_PCLK_EN();
		  	  		 else if(pI2Cx == I2C3)
		  	  		 	 I2C3_PCLK_EN();

		  	  	 }else{
		  	  		  if(pI2Cx == I2C1)
		  	  			  I2C1_PCLK_DI();
		  	  		  else if(pI2Cx == I2C2)
		  	  			  I2C2_PCLK_DI();
		  	  		  else if(pI2Cx == I2C3)
		  	  			  I2C3_PCLK_DI();

		  	  	 }
	  }

	  void RCC_GetPLLOutputClock();


	  uint32_t RCC_GetPCLKValue(void){
		  uint32_t pclk1,Systemclk, apb1p,ahbp;
		  uint8_t clksrc, temp;
		  clksrc = ((RCC->CFGR >>2) & 0x3);
		  if(clksrc == 0){
			  Systemclk = 16000000;
		  }else if(clksrc == 1){
			  Systemclk = 8000000;
		  }else if(clksrc == 2){
			  Systemclk = 1;
		  }



		  //AHB prescaler
		  temp = ((RCC->CFGR >>2) & 0xF);
		  if(temp<8){
			 ahbp =1;
		  }else{
			  ahbp = AHB_PreScaler[temp-8];
		  }

		  //APB1 prescaler
		  temp = ((RCC->CFGR >>10) & 0x7);
		  if(temp<4){
		  	 apb1p =1;
		  }else{
		  	 apb1p = APB1_PreScaler[temp-4];
		  }
		  pclk1 = (Systemclk/ahbp)/apb1p;
		  return pclk1;
	  }

	  //Init and Deint
	  void I2C_Init(I2C_Handle_t *pI2CHandle){

		  I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);

		  //note: all the below config. must be done when the peripherial is disabled in the control register
		  //1. configure the mode (standard or fast)
		  //2. configure the speed of the serial clock (scl)
		  //3.configure the device address (applicable when device is slave)
		  //4.enable the acking
		  //6.configure the rise time for i2c pins

		  //ack control bit
		  uint32_t tempreg = 0;
		  tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl<<10);
		  pI2CHandle->pI2Cx->CR1 |= tempreg;

		  //configure frq field of cr2
		  tempreg =0;
		  tempreg = RCC_GetPCLKValue()/1000000U;
		  pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);

		  //assign the slave address to OAR1
		  tempreg =0;
		  tempreg = (pI2CHandle->I2C_Config.I2C_DeviceAddress <<1);
		  tempreg |= (1<<14);
		  pI2CHandle->pI2Cx->CR2 |= tempreg;

		  //CCR calculations
		  uint16_t ccr_value = 0;
		  tempreg =0;
		  if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
			  //mode is standard mode
			  ccr_value = RCC_GetPCLKValue()/(2* pI2CHandle->I2C_Config.I2C_SCLSpeed);
			  tempreg |= (ccr_value & 0xFFF);
		  }else{
			  //mode is fast mode
			  tempreg |= (1<<15);
			  tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
			  if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
				  ccr_value = RCC_GetPCLKValue()/(3* pI2CHandle->I2C_Config.I2C_SCLSpeed);
			  }else{
				  ccr_value = RCC_GetPCLKValue()/(25* pI2CHandle->I2C_Config.I2C_SCLSpeed);
			  }
			  tempreg |= (ccr_value & 0xFFF);
		  }
		  pI2CHandle->pI2Cx->CCR |= tempreg;
		  if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
			  //standard mode

			  tempreg = (RCC_GetPCLKValue()/1000000U)+1;
		  }else{
			  //fast mode
			  tempreg = (RCC_GetPCLKValue()*300/1000000U)+1;
		  }
		  pI2CHandle->pI2Cx->TRISE = tempreg & 0x3F;
	  }
	  void I2C_DeInit(I2C_RegDef_t *pI2Cx){
		  if(pI2Cx == I2C1)
		  	  I2C1_REG_RESET();
		  else if(pI2Cx == I2C2)
		  	  I2C2_REG_RESET();
	   	  else if(pI2Cx == I2C3)
		  	  I2C3_REG_RESET();
	  }



	  //Data send and recieve
	  void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr){
		  //1.Generate the START condition

		  I2C_GenerateStartCondition(pI2CHandle->pI2Cx);


		  //2. confirm that start generation is completed by checking the SB flg in the SRI
		  //note: until SB is cleared SCL will be stretched(pulled to low)
		  while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));

		  //3. send the address phase is completed by checking the ADDR flg in teh SRI
		  I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);

		  //5. clear the ADDR flag according to its software sequence
		  //note: until ADDR is cleared SCL will be stretched
		  while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
		  I2C_ClearADDRFlag(pI2CHandle->pI2Cx);

		  //6. send the data until len becomes 0
		  while(Len>0)
		  {
			  while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
			  pI2CHandle->pI2Cx->DR = *pTxbuffer;
			  pTxbuffer++;
			  Len--;
		  }
		  //7. when len becomes zero wait for TXE = 1 and BTF =1 before generating the STOP condition
		  //note: TXE =1, BTF = 1, means that both SR and DR are empty and next transmission should begin
		  //when BTF=1 SCl will be stretched (pulled to LOW)
		  while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
		  while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)));

		  //8. Generate stop condition and master need not to wait for the completion of stop condition
		  I2C_GenerateStopCondition(pI2CHandle->pI2Cx);

	  }

	  void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr){
		  //1. generate the Start condition
		  I2C_GenerateStartCondition(pI2CHandle->pI2Cx, I2C_FLAG_SB);
		  //2. confirm that start generation is completed the SB flag in the SRI
		  while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
		  //3. send the address of the slave with r/nw bit set to R(1)
		  //4. wait until address phase is completed by checking the addr flag in teh SR1
		  //procedure to read only 1 byte from slave
		  if(Len == 1){

		  }
		  if(Len > 1){

		  }
	  }



	  //IRQ configuration and ISR handling
	  void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
		  if(EnorDi == ENABLE){
		  	  	  		 if(IRQNumber <= 31){
		  	  	  			 //program ISER0 register
		  	  	  			 *NVIC_ISER0 |= (1<<IRQNumber);

		  	  	  		 }else if(IRQNumber >31 && IRQNumber <64){
		  	  	  			 //program ISER1 register
		  	  	  			 *NVIC_ISER1 |= (1<<IRQNumber%32);

		  	  	  		 }else if(IRQNumber>= 64 && IRQNumber<96){
		  	  	  			 //program ISER2 register
		  	  	  			 *NVIC_ISER2 |= (1<<IRQNumber%64);                     //////////////////////////////////////////////////////////////////////////
		  	  	  		 }
		  	  	  	 }else {
		  	  	  		         if(IRQNumber <= 31){
		  	  	  		        	 //program ICERO register
		  	  	  		        	 *NVIC_ICER0 |= (1<<IRQNumber);

		  	  	  				 }else if(IRQNumber >31 && IRQNumber <64){
		  	  	  					 //program ICERO register
		  	  	  					 *NVIC_ICER1 |= (1<<IRQNumber%32);


		  	  	  				 }else if(IRQNumber>= 64 && IRQNumber<96){
		  	  	  					 //program ICERO register
		  	  	  					 *NVIC_ICER2 |= (1<<IRQNumber%64);              //////////////////////////////////////////////////////////////////////////

		  	  	  		  }
	  }
	  void I2C_IRQPriorityConfig(uint8_t IRQNUmber,uint32_t IRQPriority){
		  //1.first find out the ipr register
		  	  	 uint8_t iprx = IRQNumber/4;
		  	  	 uint8_t iprx_section = IRQNumber%4;
		  	  	 uint8_t shift_amount = (8*iprx_section)+(8-NO_PR_BITS_IMPLEMENTED);//check the lecture 114
		  	  	 *(NVIC_PR_BASE_ADDR+(iprx)) |= (IRQPriority << shift_amount);
	  }}


	  //other peripherial control APIs
	void I2C_PeripherialControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
			  if(EnorDi == ENABLE){
				  pI2Cx->CR1 |= (1<< SPI_CR1_SPE);
			  }else{
				  pI2Cx->CR1 &= ~(1<< SPI_CR1_SPE);
			  }
	}
	//I2C_GetFlagStatus(, uint32_t FlagName);

	//Application callback
	//void I2C_ApplicationEventCallback(I2C_Handle_t *pHandle, uint8_t AppEv);


