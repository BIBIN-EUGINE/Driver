/*
 * stm32f4xx_spi_drivers.h
 *
 *  Created on: Feb. 24, 2020
 *      Author: Bibin Eugine
 */

#ifndef INC_STM32F4XX_SPI_DRIVERS_H_
#define INC_STM32F4XX_SPI_DRIVERS_H_

#include "stm32f4xx.h"

//configuration structure of a SPI pin
 typedef struct{
	 uint8_t SPI_DeviceMode;//
	 uint8_t SPI_BusConfig;  //
	 uint8_t SPI_SclkSpeed; //
	 uint8_t SPI_DFF;//
	 uint8_t SPI_CPOL; //
	 uint8_t SPI_CPHA;
	 uint8_t SPI_SSM;
 }SPI_PinConfig_t;

 //handle structure for a SPI pin

 typedef struct{
	 SPI_RegDef_t *pSPIx;     //holds the address of the GPIO port to which the pins belongs
	 SPI_PinConfig_t SPI_PinConfig; // this holds the pin configuration settings
	 uint8_t *pTxBuffer; //To store the app. Tx buffer address
	 uint8_t *pRxBuffer;//To store the app. Rx buffer address
	 uint32_t TxLen;
	 uint32_t RxLen;
	 uint8_t TxState;
	 uint8_t RxState;
 }SPI_Handle_t;

//SPI mode
#define SPI_DEVICE_MODE_MASTER      1
#define SPI_DEVICE_MOD_SLAVE        0

//SPI Bus Config
#define SPI_BUS_CONFIG_FD                      1
#define SPI_BUS_CONFIG_HD                      2
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY          3

//SPI ScilkSpeed
#define SPI_SCLK_SPEED_DIV2                    0
#define SPI_SCLK_SPEED_DIV4                    1
#define SPI_SCLK_SPEED_DIV8                    2
#define SPI_SCLK_SPEED_DIV16                   3
#define SPI_SCLK_SPEED_DIV32                   4
#define SPI_SCLK_SPEED_DIV64                   5
#define SPI_SCLK_SPEED_DIV128                  6
#define SPI_SCLK_SPEED_DIV256                  7

 //spi DFF
#define SPI_DFF_8BITS                          0
#define SPI_DFF_16BITS                         1

 //SPI CPOL
#define SPI_CPOL_HIGH                          1
#define SPI_CPOL_LOW                           0

 //SPI CPHA
#define SPI_CPHA_HIGH                          1
#define SPI_CPHA_LOW                           0

 //SPI SSM
#define SPI_SSM_EN 1
#define SPI_SSM_DI 0

 //SPI Application states
#define SPI_READY                 0
#define SPI_BUSY_IN_RX            1
#define SPI_BUSY_IN_TX            2

 //SPI flag
#define SPI_TXE_FLAG                           (1<<SPI_SR_TXE)
#define SPI_RXNE_FLAG                          (1<<SPI_SR_RXNE)
#define SPI_BUSY_FLAG                          (1<<SPI_SR_BSY)

 //possible SPI application events
#define SPI_EVENT_TX_CMPLT  1
#define SPI_EVENT_RX_CMPLT  2
#define SPI_EVENT_OVR_ERR   3
#define SPI_EVENT_CRC_ERR   4

 /*******************APIS for SPI driver********************************************************/

  //peripherial clock setup
  void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);

  //Init and Deint
  void SPI_Init(SPI_Handle_t *pSPIHandle);
  void SPI_DeInit(SPI_RegDef_t *pSPIx);

  //Data send and recieve
  void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len);
  void SPI_ReceiveData(SPI_RegDef_t *pSPIx,uint8_t *pRxBuffer, uint32_t Len);

  uint8_t SPI_SendDataIT(SPI_Handle_t *pHandle, uint8_t *pTxBuffer, uint32_t Len);
  uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pHandle,uint8_t *pRxBuffer, uint32_t Len);


  //IRQ configuration and ISR handling
  void SPI_IRQInterruptConfig(uint8_t IRQNUmber, uint8_t EnorDi);
  void SPI_IRQPriorityConfig(uint8_t IRQNUmber,uint32_t IRQPriority);
  void SPI_IRQHandling(SPI_Handle_t *pHandle);

  //other peripherial control APIs
  void SPI_PeripherialControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);
  void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi);
  void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi);
  void SPI_ClearOVRFlag(SPI_RegDef_t *pSPIx);
  void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle);
  void SPI_CloseReception(SPI_Handle_t *pSPIHandle);


#endif /* INC_STM32F4XX_SPI_DRIVERS_H_ */
